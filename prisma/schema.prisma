generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(uuid())
  name               String?
  email              String         @unique
  password           String
  needPasswordChange Boolean        @default(true)
  contactNumber      String?
  role               UserRole?      @default(USER)
  gender             Gender?
  photo              String?
  status             UserStatus     @default(ACTIVE)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  Event              Event[]
  Participant        Participant[]
  Payment            Payment[]
  Review             Review[]
  Notification       Notification[]

  @@map("users")
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@map("subscribers")
}

model Event {
  id                  String      @id @default(uuid())
  title               String
  description         String
  isPublic            Boolean     @default(false)
  isPaid              Boolean     @default(false)
  price               Int
  category            String
  location            String?
  platform            String?
  meetingLink         String?
  meetingLinkPassword String?
  registrationStart   DateTime
  registrationEnd     DateTime
  eventStartTime      DateTime
  eventEndTime        DateTime
  seat                Int
  eventBanner         String?
  status              EventStatus @default(UPCOMING)
  eventType           EventType   @default(OFFLINE)

  paymentId String?
  reviewId  String?
  ownerId   String

  participant Participant[]

  invite  Invite?  @relation(fields: [inviteId], references: [id])
  owner   User     @relation(fields: [ownerId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [paymentId])
  review  Review[]

  @@map("events")
}

model Participant {
  id        String             @id @default(uuid())
  eventId   String
  userId    String
  status    ParticipantStatus?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("participants")
}

model Invite {
  id    String  @id @default(uuid())
  email String
  event Event[]
}

// payment model
model Payment {
  paymentId  String        @id
  eventId    String
  userId     String?
  paymentUrl String
  status     PaymentStatus @default(PENDING)
  amount     Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  event      Event[]

  user User? @relation(fields: [userId], references: [id])
}

// review model
model Review {
  id      String @id @default(uuid())
  eventId String
  userId  String
  content String
  rating  Int

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//---------------------- enum---------------------

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

//---------------------- enum for event----------------------
enum EventStatus {
  UPCOMING
  CANCELED
  ONGOING
  COMPLETED
}

enum EventType {
  ONLINE
  OFFLINE
}

enum ParticipantStatus {
  JOINED
  REQUESTED
  APPROVED
  REJECTED
  CANCELLED
}

enum PaymentStatus {
  SUCCESS
  CANCELLED
  PENDING
  COMPLETED
  FAILED
}
